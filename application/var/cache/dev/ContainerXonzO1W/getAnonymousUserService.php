<?php

namespace ContainerXonzO1W;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getAnonymousUserService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'App\Service\AnonymousUser\AnonymousUser' shared autowired service.
     *
     * @return \App\Service\AnonymousUser\AnonymousUser
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/src/Service/AnonymousUser/AnonymousUserInterface.php';
        include_once \dirname(__DIR__, 4).'/src/Service/AnonymousUser/AnonymousUser.php';
        include_once \dirname(__DIR__, 4).'/vendor/league/flysystem/src/FilesystemReader.php';
        include_once \dirname(__DIR__, 4).'/vendor/league/flysystem/src/FilesystemWriter.php';
        include_once \dirname(__DIR__, 4).'/vendor/league/flysystem/src/FilesystemOperator.php';
        include_once \dirname(__DIR__, 4).'/vendor/league/flysystem/src/Filesystem.php';
        include_once \dirname(__DIR__, 4).'/vendor/league/flysystem/src/FilesystemAdapter.php';
        include_once \dirname(__DIR__, 4).'/vendor/league/flysystem/src/Local/LocalFilesystemAdapter.php';
        include_once \dirname(__DIR__, 4).'/vendor/league/flysystem/src/UnixVisibility/VisibilityConverter.php';
        include_once \dirname(__DIR__, 4).'/vendor/league/flysystem/src/UnixVisibility/PortableVisibilityConverter.php';

        return $container->privates['App\\Service\\AnonymousUser\\AnonymousUser'] = new \App\Service\AnonymousUser\AnonymousUser(new \League\Flysystem\Filesystem(new \League\Flysystem\Local\LocalFilesystemAdapter((\dirname(__DIR__, 3).'/storage/anonymous-user'), \League\Flysystem\UnixVisibility\PortableVisibilityConverter::fromArray(['file' => ['public' => 420, 'private' => 384], 'dir' => ['public' => 493, 'private' => 448]]), 0, 2), ['visibility' => NULL, 'case_sensitive' => true, 'disable_asserts' => false]), ($container->services['.container.private.serializer'] ?? $container->load('get_Container_Private_SerializerService')), ($container->privates['monolog.logger'] ?? $container->getMonolog_LoggerService()), 'json');
    }
}
